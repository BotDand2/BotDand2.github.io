<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些稀奇古怪的东西</title>
      <link href="/post/9779baa0.html"/>
      <url>/post/9779baa0.html</url>
      
        <content type="html"><![CDATA[<h2 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab 这样子--&gt;</span><br><span class="line"><span class="strong">**只有名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb--&gt;</span><br><span class="line"><span class="strong">**图标加名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**默认 Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">这样子</button></li><li class="tab"><button type="button" data-href="#test1-2"><i class="fas fa-bomb"></i>炸弹</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>只有名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>图标加名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>默认 Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>text: 文字</p></li><li><p>color: (可选)背景颜色默认为 default<br>default/blue/pink/red/purple/orange/green</p></li></ul><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p><h2 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>title: 标题/时间线</p></li><li><p>color: timeline 颜色<br>default(留空) / blue / pink / red / purple / orange / green</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 8-12 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-12</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 杂物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形结构 学习笔记</title>
      <link href="/post/57a9c951.html"/>
      <url>/post/57a9c951.html</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="存图方式"><a href="#存图方式" class="headerlink" title="存图方式"></a>存图方式</h3><h4 id="texttt-vector-存图"><a href="#texttt-vector-存图" class="headerlink" title="$\texttt{vector}$ 存图"></a>$\texttt{vector}$ 存图</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加单向边 (x,y)</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">g[x].<span class="built_in">push_back</span>(y);</span><br></pre></td></tr></table></figure><h4 id="texttt-vector-遍历"><a href="#texttt-vector-遍历" class="headerlink" title="$\texttt{vector}$ 遍历"></a>$\texttt{vector}$ 遍历</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历与 x 相邻的点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x];++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> y=g[x][i];<span class="comment">// 下一个遍历的点</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链式前向星-存图"><a href="#链式前向星-存图" class="headerlink" title="链式前向星 存图"></a>链式前向星 存图</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加单向边 (x,y)，边值为 w</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">arr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to,w,next;</span><br><span class="line">&#125;edge[N];</span><br><span class="line"><span class="type">int</span> head[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    edge[cnt].next=head[x];</span><br><span class="line">    head[x]=cnt;</span><br><span class="line">    edge[cnt].to=y;</span><br><span class="line">    edge[cnt].w=w;<span class="comment">// 存边值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="built_in">add</span>(x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链式前向星-遍历"><a href="#链式前向星-遍历" class="headerlink" title="链式前向星 遍历"></a>链式前向星 遍历</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历与 x 相邻的点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> y=edge[i].to;<span class="comment">// 下一个遍历的点</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：画图工具 <a href="https://csacademy.com/app/graph_editor/">CS Academy</a></p><h2 id="树的直径"><a href="#树的直径" class="headerlink" title="树的直径"></a>树的直径</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>树上任意两节点之间最长的简单路径即为树的直径。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵乘法 学习笔记</title>
      <link href="/post/13ab9d87.html"/>
      <url>/post/13ab9d87.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前置知识"><a href="#0-前置知识" class="headerlink" title="0.前置知识"></a>0.前置知识</h2><p>无</p><h2 id="1-矩阵"><a href="#1-矩阵" class="headerlink" title="1.矩阵"></a>1.矩阵</h2><p>矩阵乘法即为两个矩阵相乘。</p><p>矩阵长这样：<br>$\begin{bmatrix}<br> a_{1,1} &amp; \dots  &amp; a_{1,m}\\<br> \vdots   &amp; \ddots  &amp; \vdots \\<br> a_{n,1} &amp; \dots  &amp; a_{n,m}<br>\end{bmatrix}$</p><p>矩阵乘法需要满足的条件为两个分别为 $n \times k$，$k \times m$的矩阵相乘。</p><p>单元矩阵为对角线为 $1$ 的矩阵，就是数字中的 $1$。</p><h2 id="2-矩阵运算"><a href="#2-矩阵运算" class="headerlink" title="2.矩阵运算"></a>2.矩阵运算</h2><h3 id="1-加法"><a href="#1-加法" class="headerlink" title="1.加法"></a>1.加法</h3><p>令<br>$A=<br>\begin{bmatrix}<br> 2 &amp; 3 &amp; 1\\<br> 1 &amp; 4 &amp; 2<br>\end{bmatrix}$，$<br>B=\begin{bmatrix}<br> 4 &amp; 3 &amp; 2\\<br> 2 &amp; 3 &amp; 2<br>\end{bmatrix}$，则<br>$A+B=\begin{bmatrix}<br> 2+4 &amp; 3+3 &amp; 1+2\\<br> 1+2 &amp; 4+3 &amp; 2+2<br>\end{bmatrix}=\begin{bmatrix}<br> 6 &amp; 6 &amp; 3\\<br> 3 &amp; 7 &amp; 4<br>\end{bmatrix}$</p><h3 id="2-减法"><a href="#2-减法" class="headerlink" title="2.减法"></a>2.减法</h3><p>令<br>$A=<br>\begin{bmatrix}<br> 4 &amp; 3 &amp; 2\\<br> 2 &amp; 4 &amp; 2<br>\end{bmatrix}$，$<br>B=<br>\begin{bmatrix}<br> 2 &amp; 3 &amp; 1\\<br> 1 &amp; 3 &amp; 2<br>\end{bmatrix}$，则<br>$A-B=\begin{bmatrix}<br> 4-2 &amp; 3-3 &amp; 2-1\\<br> 2-1 &amp; 4-3 &amp; 2-2<br>\end{bmatrix}=\begin{bmatrix}<br> 2 &amp; 0 &amp; 1\\<br> 1 &amp; 1 &amp; 0<br>\end{bmatrix}$</p><h3 id="3-数乘"><a href="#3-数乘" class="headerlink" title="3.数乘"></a>3.数乘</h3><p>令<br>$A=<br>\begin{bmatrix}<br> 4 &amp; 3 &amp; 2\\<br> 2 &amp; 4 &amp; 2<br>\end{bmatrix}$，则<br>$2 \times A=<br>\begin{bmatrix}<br> 2 \times 4 &amp; 2 \times 3 &amp; 2 \times 2\\<br> 2 \times 2 &amp; 2 \times 4 &amp; 2 \times 2<br>\end{bmatrix}=<br>\begin{bmatrix}<br> 8 &amp; 6 &amp; 4\\<br> 4 &amp; 8 &amp; 4<br>\end{bmatrix}$</p><h3 id="4-乘法"><a href="#4-乘法" class="headerlink" title="4.乘法"></a>4.乘法</h3><p>设 $A$ 为一个 $n \times k$ 的矩阵，$B$ 为一个 $k \times m$ 的矩阵。</p><p>则 $A$ 与 $B$ 的乘积 $C$ 为一个 $n \times m$的矩阵，且满足$C_{i,j}=\sum_{r=1}^kA_{i,r} \times B_{r,j}$</p><p>举个例子，$A=<br>\begin{bmatrix}<br> 1 &amp; 2 &amp; 2\\<br> 1 &amp; 3 &amp; 2<br>\end{bmatrix}$，$<br>B=<br>\begin{bmatrix}<br> 1 &amp; 0 \\<br> 2 &amp; 2 \\<br> 1 &amp; 1<br>\end{bmatrix}$，则 $A \times B=<br>\begin{bmatrix}<br> 1 \times 1+2 \times 2+2 \times 1 &amp; 1 \times 0+2 \times 2+2 \times 1\\<br> 1 \times 1+3 \times 2+2 \times 1 &amp; 1 \times 0+3 \times 2+2 \times 1<br>\end{bmatrix}=<br>\begin{bmatrix}<br> 7 &amp; 6 \\<br> 9 &amp; 8<br>\end{bmatrix}<br>$</p><h3 id="5-快速幂"><a href="#5-快速幂" class="headerlink" title="5.快速幂"></a>5.快速幂</h3><p>就是快速幂将普通乘法改为矩阵乘法即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans=ans*a;</span><br><span class="line">    a=a*a;n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还要重定义 <code>*</code> 运算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">arr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line">    <span class="built_in">arr</span>() &#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));&#125;</span><br><span class="line">    arr <span class="keyword">operator</span> *(<span class="type">const</span> arr &amp;b) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        arr c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=K;++j)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=M;++k)</span><br><span class="line">                    c.a[i][j]=(c.a[i][j]+a[i][k]*b.a[k][j]%mo)%mo;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a,ans;</span><br></pre></td></tr></table></figure><p>就可以运算了。</p><p>模板题：P3390。</p><h2 id="3-应用"><a href="#3-应用" class="headerlink" title="3.应用"></a>3.应用</h2><p>可以快速求除斐波那契数列的第 $n$ 项。</p><p>设 $<br>\begin{bmatrix}<br> f_{n-1} &amp; f_{n-2}<br>\end{bmatrix} \times<br>\begin{bmatrix}<br> a &amp; b \\<br> c &amp; d<br>\end{bmatrix}=<br>\begin{bmatrix}<br> f_{n} &amp; f_{n-1}<br>\end{bmatrix}$</p><p>则 $\begin{bmatrix}<br> f_{n-1} \times a+f_{n-2} \times c &amp; f_{n-1} \times b+f_{n-2} \times d<br>\end{bmatrix}=<br>\begin{bmatrix}<br> f_{n} &amp; f_{n-1}<br>\end{bmatrix}$</p><p>所以 $\left\{\begin{matrix} f_{n-1} \times a+f_{n-2} \times c=f_{n} \\ f_{n-1} \times b+f_{n-2} \times d=f_{n-1}\end{matrix}\right.$</p><p>因为 $f_{n}=f_{n-1}+f_{n-2}$</p><p>解得 $\left\{\begin{matrix}a=1 \\b=1 \\c=1 \\d=0\end{matrix}\right.$</p><p>所以 $<br>\begin{bmatrix}<br> f_{n-1} &amp; f_{n-2}<br>\end{bmatrix} \times<br>\begin{bmatrix}<br> 1 &amp; 1 \\<br> 1 &amp; 0<br>\end{bmatrix}=<br>\begin{bmatrix}<br> f_{n} &amp; f_{n-1}<br>\end{bmatrix}$</p><p>进一步转换得 $<br>\begin{bmatrix}<br> f_{2} &amp; f_{1}<br>\end{bmatrix} \times<br>\begin{bmatrix}<br> 1 &amp; 1 \\<br> 1 &amp; 0<br>\end{bmatrix}^{n-2}=<br>\begin{bmatrix}<br> f_{n} &amp; f_{n-1}<br>\end{bmatrix}$</p><p>所以这玩意就可以用快速幂做了，复杂度为$O(\log_{2}n)$。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>挺玄学的算法。</p><p>练习题：</p><p>P1962</p><p>P1349</p><p>P1306</p><p>P4834</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树 学习笔记</title>
      <link href="/post/bf8e9a46.html"/>
      <url>/post/bf8e9a46.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前置知识"><a href="#0-前置知识" class="headerlink" title="0.前置知识"></a>0.前置知识</h2><h3 id="1-什么是线段树"><a href="#1-什么是线段树" class="headerlink" title="1.什么是线段树"></a>1.什么是线段树</h3><p>线段树，是一种 <strong>二叉搜索树</strong> 。它将一段区间划分为若干 <strong>单位区间</strong>，每一个节点都储存着一个区间。它功能强大，支持区间求和，区间最大值，区间修改，单点修改等操作。</p><p>线段树的每个节点都存储的一段区间 $[l,r]$，如果是叶子节点，则 $l=r$。</p><p>它的大致思想是：将一段大区间平均地划分成 $2$ 个小区间，每一个小区间都再平均分成 $2$ 个更小区间，直到一个区间的 $l=r$ 才停止。</p><h3 id="2-它能干什么"><a href="#2-它能干什么" class="headerlink" title="2. 它能干什么"></a>2. 它能干什么</h3><p>像上文所说，它能支持区间求和，区间最大值的查询等，换句话说，它能支持的操作能使得区间 $[l,r]$ 可以由 $[l,mid]$ 和 $[mid+1,r]$ 的答案合并得到。</p><p>如区间众数的查询这类问题就不满足该条件。</p><h2 id="1-建树"><a href="#1-建树" class="headerlink" title="1.建树"></a>1.建树</h2><p>通过它的思想可知，每次将一个区间 $[l,r]$ 分为两个小区间 $\bigg[l,\left \lfloor \frac{l+r}{2} \right \rfloor \bigg]$，$\bigg[\left \lfloor \frac{l+r}{2} \right \rfloor +1,r\bigg]$ 进行维护，直到 $l=r$。</p><p>如一颗 $[1,10]$ 的线段树的维护过程（图片来自<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%AE%B5%E6%A0%91/10983506?fr=aladdin">百度百科</a>）</p><p><img src="https://s1.ax1x.com/2022/08/04/vewyGj.png" alt=""></p><p>存储方法通常是<strong>堆式储存法</strong>，节点 $k$ 的左儿子为 $2\times k$，右儿子为 $2\times k+1$，表示区间 $[l,r]$。</p><p>$\texttt{Ps}$：线段树要开 $4 \sim 8$ 倍空间。</p><p>下文代码均为区间求和与区间加操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">arr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">int</span> sum;<span class="comment">// 维护区间和</span></span><br><span class="line">&#125;tree[<span class="number">400002</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].sum=tree[k*<span class="number">2</span>].sum+tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">    <span class="comment">// 该区间的和等于子区间的和</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"><span class="comment">// k 表示节点数，l 和 r 表示当前的左右边界</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].l=l;tree[k].r=r;<span class="comment">// 存储区间 [l,r]</span></span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="comment">//如果是叶节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum=a[l];<span class="comment">// a 数组表示给定的初始数组</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(k*<span class="number">2</span>,l,mid);<span class="built_in">build</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);<span class="comment">// 递归左右儿子建树</span></span><br><span class="line">    <span class="built_in">update</span>(k);<span class="comment">// 用左右儿子的值更新当前节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-区间修改"><a href="#2-区间修改" class="headerlink" title="2.区间修改"></a>2.区间修改</h2><p>可以借助图片理解。</p><ol><li>修改区间与当前区间的左右区间均有交集；</li></ol><p><img src="https://s1.ax1x.com/2022/08/04/veB19H.png" alt=""></p><p>可以将修改区间也对半分，然后递归左右区间实现修改操作。</p><p><img src="https://s1.ax1x.com/2022/08/04/veBYut.png" alt=""></p><ol><li>修改区间仅与当前区间的左区间有交集；</li></ol><p><img src="https://s1.ax1x.com/2022/08/04/veBBCQ.png" alt=""></p><p>这时候不用管右区间，直接递归左区间实现修改操作。</p><ol><li>修改区间仅与当前区间的右区间有交集；</li></ol><p><img src="https://s1.ax1x.com/2022/08/04/veBD3j.png" alt=""></p><p>同理，只递归右区间即可。</p><ol><li>修改区间与当前区间重合；</li></ol><p><img src="https://s1.ax1x.com/2022/08/04/veBLVK.png" alt=""></p><p>当前区间的 $\text{sum}$ 加上 $(r-l+1)\times x$，其中 $x$ 为区间加的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 搜到节点 k，修改的区间为 [l,r]，区间加 x</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r)<span class="comment">// 情况 4</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum+=(r-l+<span class="number">1</span>)*x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="built_in">change</span>(k*<span class="number">2</span>,l,r,x);<span class="comment">// 情况 2</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">change</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r,x);<span class="comment">// 情况 3</span></span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">change</span>(k*<span class="number">2</span>,l,mid,x),<span class="built_in">change</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,x);<span class="comment">// 情况 4</span></span><br><span class="line">    <span class="built_in">update</span>(k);<span class="comment">// 别忘了更新当前区间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-区间查询"><a href="#3-区间查询" class="headerlink" title="3.区间查询"></a>3.区间查询</h2><p>与区间修改类似。</p><ol><li>查询区间如果与当前区间重合，则直接返回当前区间的 $\text{sum}$ 值。</li><li>查询区间如果仅与当前区间的左区间有交集，则返回递归左区间的值。</li><li>查询区间如果仅与当前区间的右区间有交集，则返回递归右区间的值。</li><li>查询区间如果与当前区间的左右区间均有交集，则返回递归左右区间的值的和。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 搜到节点 k，查询的区间为 [l,r] </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r) <span class="keyword">return</span> tree[k].sum;<span class="comment">// 情况 1 </span></span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>,l,r);<span class="comment">// 情况 2 </span></span><br><span class="line">    <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r);<span class="comment">// 情况 3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>,l,mid)+<span class="built_in">query</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);<span class="comment">// 情况 4 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-懒标记"><a href="#4-懒标记" class="headerlink" title="4.懒标记"></a>4.懒标记</h2><p>如果只是这样暴力修改与查询，复杂度甚至比朴素暴力还要高。</p><p>可以引入懒标记，在每次修改时假装已经给儿子节点修改，在每次查询操作时再下放。</p><p>举个例子，在将区间 $[1,5]$ 加 $3$ 时，可以给区间 $[1,5]$ 的 $\text{lazy}$ 标记上先加 $3$，在查询 $[1,3]$ 的区间和时再给其区间和加上 $(3-1+1)\times 3$。</p><p>注意在修改时也应先下传懒标记。</p><p><img src="https://s1.ax1x.com/2022/08/04/vewyGj.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 下传 k 节点的懒标记</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree[k].lazy) <span class="keyword">return</span>;<span class="comment">// 如果没有懒标记则不用下传 </span></span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==tree[k].r)<span class="comment">// 如果是叶节点则不用下传 </span></span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].lazy=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tree[k*<span class="number">2</span>].sum+=(tree[k*<span class="number">2</span>].r-tree[k*<span class="number">2</span>].l+<span class="number">1</span>)*tree[k].lazy;</span><br><span class="line">    tree[k*<span class="number">2</span>+<span class="number">1</span>].sum+=(tree[k*<span class="number">2</span>+<span class="number">1</span>].r-tree[k*<span class="number">2</span>+<span class="number">1</span>].l+<span class="number">1</span>)*tree[k].lazy;</span><br><span class="line">    <span class="comment">// 左右节点的区间和加上该节点懒标记</span></span><br><span class="line">    tree[k*<span class="number">2</span>].lazy+=tree[k].lazy;</span><br><span class="line">    tree[k*<span class="number">2</span>+<span class="number">1</span>].lazy+=tree[k].lazy;</span><br><span class="line">    <span class="comment">// 左右节点的懒标记加上该节点的懒标记 </span></span><br><span class="line">    tree[k].lazy=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 该节点的懒标记清空 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-习题"><a href="#5-习题" class="headerlink" title="5.习题"></a>5.习题</h2><p><a href="https://www.luogu.com.cn/problem/P3372">模板 $1$</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">arr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,sum,lazy;</span><br><span class="line">&#125;tree[<span class="number">400002</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100002</span>];</span><br><span class="line"><span class="type">int</span> x,l,r,k;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==tree[k].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].lazy=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tree[k*<span class="number">2</span>].sum+=(tree[k*<span class="number">2</span>].r-tree[k*<span class="number">2</span>].l+<span class="number">1</span>)*tree[k].lazy;</span><br><span class="line">    tree[k*<span class="number">2</span>+<span class="number">1</span>].sum+=(tree[k*<span class="number">2</span>+<span class="number">1</span>].r-tree[k*<span class="number">2</span>+<span class="number">1</span>].l+<span class="number">1</span>)*tree[k].lazy;</span><br><span class="line">    tree[k*<span class="number">2</span>].lazy+=tree[k].lazy;</span><br><span class="line">    tree[k*<span class="number">2</span>+<span class="number">1</span>].lazy+=tree[k].lazy;</span><br><span class="line">    tree[k].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].l=l;tree[k].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(k*<span class="number">2</span>,l,mid);<span class="built_in">build</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    tree[k].sum=tree[k*<span class="number">2</span>].sum+tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum+=x*(r-l+<span class="number">1</span>);</span><br><span class="line">        tree[k].lazy+=x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="built_in">change</span>(k*<span class="number">2</span>,l,r,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">change</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r,x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">change</span>(k*<span class="number">2</span>,l,mid,x),<span class="built_in">change</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,x);</span><br><span class="line">    tree[k].sum=tree[k*<span class="number">2</span>].sum+tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].lazy) <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r) <span class="keyword">return</span> tree[k].sum;</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>,l,mid)+<span class="built_in">query</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;k;</span><br><span class="line">            <span class="built_in">change</span>(<span class="number">1</span>,l,r,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,l,r)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P3373">模板 $2$</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">arr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,sum;</span><br><span class="line">    <span class="type">int</span> lazy1;<span class="comment">// 乘法</span></span><br><span class="line">    <span class="type">int</span> lazy2;<span class="comment">// 加法 </span></span><br><span class="line">&#125;tree[<span class="number">400002</span>];</span><br><span class="line"><span class="type">int</span> n,m,mo;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100002</span>];</span><br><span class="line"><span class="type">int</span> x,l,r,k;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k*<span class="number">2</span>].sum=((tree[k*<span class="number">2</span>].r-tree[k*<span class="number">2</span>].l+<span class="number">1</span>)*tree[k].lazy2%mo+tree[k*<span class="number">2</span>].sum*tree[k].lazy1%mo)%mo;</span><br><span class="line">    tree[k*<span class="number">2</span>+<span class="number">1</span>].sum=((tree[k*<span class="number">2</span>+<span class="number">1</span>].r-tree[k*<span class="number">2</span>+<span class="number">1</span>].l+<span class="number">1</span>)*tree[k].lazy2%mo+tree[k*<span class="number">2</span>+<span class="number">1</span>].sum*tree[k].lazy1%mo)%mo;</span><br><span class="line">    tree[k*<span class="number">2</span>].lazy1=(tree[k*<span class="number">2</span>].lazy1*tree[k].lazy1)%mo;</span><br><span class="line">    tree[k*<span class="number">2</span>+<span class="number">1</span>].lazy1=(tree[k*<span class="number">2</span>+<span class="number">1</span>].lazy1*tree[k].lazy1)%mo;</span><br><span class="line">    tree[k*<span class="number">2</span>].lazy2=(tree[k*<span class="number">2</span>].lazy2*tree[k].lazy1%mo+tree[k].lazy2)%mo;</span><br><span class="line">    tree[k*<span class="number">2</span>+<span class="number">1</span>].lazy2=(tree[k*<span class="number">2</span>+<span class="number">1</span>].lazy2*tree[k].lazy1%mo+tree[k].lazy2)%mo;</span><br><span class="line">    tree[k].lazy1=<span class="number">1</span>;tree[k].lazy2=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].l=l;tree[k].r=r;tree[k].lazy1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum=a[l]%mo;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(k*<span class="number">2</span>,l,mid);<span class="built_in">build</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    tree[k].sum=(tree[k*<span class="number">2</span>].sum+tree[k*<span class="number">2</span>+<span class="number">1</span>].sum)%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change1</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum=(tree[k].sum*x)%mo;</span><br><span class="line">        tree[k].lazy1=(tree[k].lazy1*x)%mo;</span><br><span class="line">        tree[k].lazy2=(tree[k].lazy2*x)%mo;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="built_in">change1</span>(k*<span class="number">2</span>,l,r,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">change1</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r,x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">change1</span>(k*<span class="number">2</span>,l,mid,x),<span class="built_in">change1</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,x);</span><br><span class="line">    tree[k].sum=(tree[k*<span class="number">2</span>].sum+tree[k*<span class="number">2</span>+<span class="number">1</span>].sum)%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change2</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum=(tree[k].sum+x*(r-l+<span class="number">1</span>)%mo)%mo;</span><br><span class="line">        tree[k].lazy2=(tree[k].lazy2+x)%mo;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="built_in">change2</span>(k*<span class="number">2</span>,l,r,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">change2</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r,x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">change2</span>(k*<span class="number">2</span>,l,mid,x),<span class="built_in">change2</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,x);</span><br><span class="line">    tree[k].sum=(tree[k*<span class="number">2</span>].sum+tree[k*<span class="number">2</span>+<span class="number">1</span>].sum)%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r) <span class="keyword">return</span> tree[k].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>,l,r)%mo;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r)%mo;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">query</span>(k*<span class="number">2</span>,l,mid)+<span class="built_in">query</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r))%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;mo;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;k;</span><br><span class="line">            <span class="built_in">change1</span>(<span class="number">1</span>,l,r,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;k;</span><br><span class="line">            <span class="built_in">change2</span>(<span class="number">1</span>,l,r,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,l,r)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P2572">序列操作</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">arr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">int</span> lazy;<span class="comment">// 取反操作</span></span><br><span class="line">    <span class="type">int</span> sum;<span class="comment">// 区间中 1 的个数</span></span><br><span class="line">    <span class="type">int</span> to;<span class="comment">// 改为 0 或 1，-1 表示没改</span></span><br><span class="line">    <span class="type">int</span> conl0;<span class="comment">// 从 l 往 r 有多少续的 0</span></span><br><span class="line">    <span class="type">int</span> conr0;<span class="comment">// 从 r 往 l 有多少续的 0</span></span><br><span class="line">    <span class="type">int</span> conl1;<span class="comment">// 从 l 往 r 有多少续的 1</span></span><br><span class="line">    <span class="type">int</span> conr1;<span class="comment">// 从 r 往 l 有多少续的 1</span></span><br><span class="line">    <span class="type">int</span> ma0;<span class="comment">// 最长连续 0 的个数</span></span><br><span class="line">    <span class="type">int</span> ma1;<span class="comment">// 最长连续 1 的个数</span></span><br><span class="line">    <span class="type">int</span> len;<span class="comment">// 区间长度</span></span><br><span class="line">&#125;tree[<span class="number">400002</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100002</span>];</span><br><span class="line"><span class="type">int</span> op,x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MIN</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MAX</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">MAX</span>(<span class="built_in">MAX</span>(a,b),c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].sum=tree[k*<span class="number">2</span>].sum+tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">    <span class="keyword">if</span>(tree[k*<span class="number">2</span>].ma0==tree[k*<span class="number">2</span>].len) tree[k].conl0=tree[k*<span class="number">2</span>].len+tree[k*<span class="number">2</span>+<span class="number">1</span>].conl0;</span><br><span class="line">        <span class="keyword">else</span> tree[k].conl0=tree[k*<span class="number">2</span>].conl0;</span><br><span class="line">    <span class="keyword">if</span>(tree[k*<span class="number">2</span>+<span class="number">1</span>].ma0==tree[k*<span class="number">2</span>+<span class="number">1</span>].len) tree[k].conr0=tree[k*<span class="number">2</span>+<span class="number">1</span>].len+tree[k*<span class="number">2</span>].conr0;</span><br><span class="line">        <span class="keyword">else</span> tree[k].conr0=tree[k*<span class="number">2</span>+<span class="number">1</span>].conr0;</span><br><span class="line">    <span class="keyword">if</span>(tree[k*<span class="number">2</span>].ma1==tree[k*<span class="number">2</span>].len) tree[k].conl1=tree[k*<span class="number">2</span>].len+tree[k*<span class="number">2</span>+<span class="number">1</span>].conl1;</span><br><span class="line">        <span class="keyword">else</span> tree[k].conl1=tree[k*<span class="number">2</span>].conl1;</span><br><span class="line">    <span class="keyword">if</span>(tree[k*<span class="number">2</span>+<span class="number">1</span>].ma1==tree[k*<span class="number">2</span>+<span class="number">1</span>].len) tree[k].conr1=tree[k*<span class="number">2</span>+<span class="number">1</span>].len+tree[k*<span class="number">2</span>].conr1;</span><br><span class="line">        <span class="keyword">else</span> tree[k].conr1=tree[k*<span class="number">2</span>+<span class="number">1</span>].conr1;</span><br><span class="line">    tree[k].ma0=<span class="built_in">Max</span>(tree[k*<span class="number">2</span>].ma0,tree[k*<span class="number">2</span>+<span class="number">1</span>].ma0,tree[k*<span class="number">2</span>].conr0+tree[k*<span class="number">2</span>+<span class="number">1</span>].conl0);</span><br><span class="line">    tree[k].ma1=<span class="built_in">Max</span>(tree[k*<span class="number">2</span>].ma1,tree[k*<span class="number">2</span>+<span class="number">1</span>].ma1,tree[k*<span class="number">2</span>].conr1+tree[k*<span class="number">2</span>+<span class="number">1</span>].conl1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].to==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k*<span class="number">2</span>].ma0=tree[k*<span class="number">2</span>].conl0=tree[k*<span class="number">2</span>].conr0=tree[k*<span class="number">2</span>].len;</span><br><span class="line">        tree[k*<span class="number">2</span>].sum=tree[k*<span class="number">2</span>].ma1=tree[k*<span class="number">2</span>].conl1=tree[k*<span class="number">2</span>].conr1=<span class="number">0</span>;</span><br><span class="line">        tree[k*<span class="number">2</span>+<span class="number">1</span>].ma0=tree[k*<span class="number">2</span>+<span class="number">1</span>].conl0=tree[k*<span class="number">2</span>+<span class="number">1</span>].conr0=tree[k*<span class="number">2</span>+<span class="number">1</span>].len;</span><br><span class="line">        tree[k*<span class="number">2</span>+<span class="number">1</span>].sum=tree[k*<span class="number">2</span>+<span class="number">1</span>].ma1=tree[k*<span class="number">2</span>+<span class="number">1</span>].conl1=tree[k*<span class="number">2</span>+<span class="number">1</span>].conr1=<span class="number">0</span>;</span><br><span class="line">        tree[k*<span class="number">2</span>].to=<span class="number">0</span>;tree[k*<span class="number">2</span>].lazy=<span class="number">0</span>;</span><br><span class="line">        tree[k*<span class="number">2</span>+<span class="number">1</span>].to=<span class="number">0</span>;tree[k*<span class="number">2</span>+<span class="number">1</span>].lazy=<span class="number">0</span>;</span><br><span class="line">        tree[k].to=<span class="number">-1</span>;tree[k].lazy=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].to==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k*<span class="number">2</span>].ma0=tree[k*<span class="number">2</span>].conl0=tree[k*<span class="number">2</span>].conr0=<span class="number">0</span>;</span><br><span class="line">        tree[k*<span class="number">2</span>].sum=tree[k*<span class="number">2</span>].ma1=tree[k*<span class="number">2</span>].conl1=tree[k*<span class="number">2</span>].conr1=tree[k*<span class="number">2</span>].len;</span><br><span class="line">        tree[k*<span class="number">2</span>+<span class="number">1</span>].ma0=tree[k*<span class="number">2</span>+<span class="number">1</span>].conl0=tree[k*<span class="number">2</span>+<span class="number">1</span>].conr0=<span class="number">0</span>;</span><br><span class="line">        tree[k*<span class="number">2</span>+<span class="number">1</span>].sum=tree[k*<span class="number">2</span>+<span class="number">1</span>].ma1=tree[k*<span class="number">2</span>+<span class="number">1</span>].conl1=tree[k*<span class="number">2</span>+<span class="number">1</span>].conr1=tree[k*<span class="number">2</span>+<span class="number">1</span>].len;</span><br><span class="line">        tree[k*<span class="number">2</span>].to=<span class="number">1</span>;tree[k*<span class="number">2</span>].lazy=<span class="number">0</span>;</span><br><span class="line">        tree[k*<span class="number">2</span>+<span class="number">1</span>].to=<span class="number">1</span>;tree[k*<span class="number">2</span>+<span class="number">1</span>].lazy=<span class="number">0</span>;</span><br><span class="line">        tree[k].to=<span class="number">-1</span>;tree[k].lazy=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].lazy)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k*<span class="number">2</span>].sum=tree[k*<span class="number">2</span>].len-tree[k*<span class="number">2</span>].sum;</span><br><span class="line">        tree[k*<span class="number">2</span>+<span class="number">1</span>].sum=tree[k*<span class="number">2</span>+<span class="number">1</span>].len-tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">        <span class="built_in">swap</span>(tree[k*<span class="number">2</span>].ma0,tree[k*<span class="number">2</span>].ma1);</span><br><span class="line">        <span class="built_in">swap</span>(tree[k*<span class="number">2</span>+<span class="number">1</span>].ma0,tree[k*<span class="number">2</span>+<span class="number">1</span>].ma1);</span><br><span class="line">        <span class="built_in">swap</span>(tree[k*<span class="number">2</span>].conl0,tree[k*<span class="number">2</span>].conl1);</span><br><span class="line">        <span class="built_in">swap</span>(tree[k*<span class="number">2</span>+<span class="number">1</span>].conl0,tree[k*<span class="number">2</span>+<span class="number">1</span>].conl1);</span><br><span class="line">        <span class="built_in">swap</span>(tree[k*<span class="number">2</span>].conr0,tree[k*<span class="number">2</span>].conr1);</span><br><span class="line">        <span class="built_in">swap</span>(tree[k*<span class="number">2</span>+<span class="number">1</span>].conr0,tree[k*<span class="number">2</span>+<span class="number">1</span>].conr1);</span><br><span class="line">        <span class="keyword">if</span>(tree[k*<span class="number">2</span>].to==<span class="number">0</span>) tree[k*<span class="number">2</span>].to=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tree[k*<span class="number">2</span>].to==<span class="number">1</span>) tree[k*<span class="number">2</span>].to=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> tree[k*<span class="number">2</span>].lazy=<span class="number">1</span>-tree[k*<span class="number">2</span>].lazy;</span><br><span class="line">        <span class="keyword">if</span>(tree[k*<span class="number">2</span>+<span class="number">1</span>].to==<span class="number">0</span>) tree[k*<span class="number">2</span>+<span class="number">1</span>].to=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tree[k*<span class="number">2</span>+<span class="number">1</span>].to==<span class="number">1</span>) tree[k*<span class="number">2</span>+<span class="number">1</span>].to=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> tree[k*<span class="number">2</span>+<span class="number">1</span>].lazy=<span class="number">1</span>-tree[k*<span class="number">2</span>+<span class="number">1</span>].lazy;</span><br><span class="line">        tree[k].lazy=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].l=l;tree[k].r=r;</span><br><span class="line">    tree[k].lazy=<span class="number">0</span>;</span><br><span class="line">    tree[k].to=<span class="number">-1</span>;</span><br><span class="line">    tree[k].len=r-l+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum=a[l];</span><br><span class="line">        <span class="keyword">if</span>(a[l]==<span class="number">0</span>) tree[k].conl0=tree[k].conr0=tree[k].ma0=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[l]==<span class="number">1</span>) tree[k].conl1=tree[k].conr1=tree[k].ma1=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(k*<span class="number">2</span>,l,mid);<span class="built_in">build</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">update</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change_to0</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].ma0=tree[k].conl0=tree[k].conr0=tree[k].len;</span><br><span class="line">        tree[k].ma1=tree[k].conl1=tree[k].conr1=<span class="number">0</span>;</span><br><span class="line">        tree[k].sum=<span class="number">0</span>;</span><br><span class="line">        tree[k].to=<span class="number">0</span>;</span><br><span class="line">        tree[k].lazy=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="built_in">change_to0</span>(k*<span class="number">2</span>,l,r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">change_to0</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">change_to0</span>(k*<span class="number">2</span>,l,mid),<span class="built_in">change_to0</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">update</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change_to1</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].ma0=tree[k].conl0=tree[k].conr0=<span class="number">0</span>;</span><br><span class="line">        tree[k].ma1=tree[k].conl1=tree[k].conr1=tree[k].len;</span><br><span class="line">        tree[k].sum=tree[k].len;</span><br><span class="line">        tree[k].to=<span class="number">1</span>;</span><br><span class="line">        tree[k].lazy=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="built_in">change_to1</span>(k*<span class="number">2</span>,l,r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">change_to1</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">change_to1</span>(k*<span class="number">2</span>,l,mid),<span class="built_in">change_to1</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">update</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change_lazy</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum=tree[k].len-tree[k].sum;</span><br><span class="line">        <span class="built_in">swap</span>(tree[k].ma0,tree[k].ma1);</span><br><span class="line">        <span class="built_in">swap</span>(tree[k].conl0,tree[k].conl1);</span><br><span class="line">        <span class="built_in">swap</span>(tree[k].conr0,tree[k].conr1);</span><br><span class="line">        tree[k].lazy=<span class="number">1</span>-tree[k].lazy;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="built_in">change_lazy</span>(k*<span class="number">2</span>,l,r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">change_lazy</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">change_lazy</span>(k*<span class="number">2</span>,l,mid),<span class="built_in">change_lazy</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">update</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_sum</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r) <span class="keyword">return</span> tree[k].sum;</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query_sum</span>(k*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query_sum</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query_sum</span>(k*<span class="number">2</span>,l,mid)+<span class="built_in">query_sum</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_con</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r) <span class="keyword">return</span> tree[k].ma1;</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query_con</span>(k*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query_con</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Max</span>(<span class="built_in">query_con</span>(k*<span class="number">2</span>,l,mid),<span class="built_in">query_con</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r),<span class="built_in">MIN</span>(tree[k*<span class="number">2</span>+<span class="number">1</span>].conl1,r-mid)+<span class="built_in">MIN</span>(tree[k*<span class="number">2</span>].conr1,mid-l+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>*n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[i].l==<span class="number">0</span>&amp;&amp;tree[i].r==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        cout&lt;&lt;tree[i].l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;tree[i].r&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;tree[i].conl1&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;tree[i].conr1&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>*n;++i) tree[i].to=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        x++;y++;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">0</span>) <span class="built_in">change_to0</span>(<span class="number">1</span>,x,y);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) <span class="built_in">change_to1</span>(<span class="number">1</span>,x,y);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">2</span>) <span class="built_in">change_lazy</span>(<span class="number">1</span>,x,y);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>) cout&lt;&lt;<span class="built_in">query_sum</span>(<span class="number">1</span>,x,y)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">4</span>) cout&lt;&lt;<span class="built_in">query_con</span>(<span class="number">1</span>,x,y)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//        if(op==5) check();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P4145">区间开平方</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">arr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,sum,ma;</span><br><span class="line">&#125;tree[<span class="number">1600002</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100002</span>];</span><br><span class="line"><span class="type">int</span> k,l,r;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].sum=tree[k*<span class="number">2</span>].sum+tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">    tree[k].ma=<span class="built_in">Max</span>(tree[k*<span class="number">2</span>].ma,tree[k*<span class="number">2</span>+<span class="number">1</span>].ma);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].l=l;tree[k].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum=tree[k].ma=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(k*<span class="number">2</span>,l,mid);<span class="built_in">build</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">update</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==tree[k].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum=<span class="built_in">sqrt</span>(tree[k].sum);</span><br><span class="line">        tree[k].ma=<span class="built_in">sqrt</span>(tree[k].ma);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid&amp;&amp;tree[k*<span class="number">2</span>].ma&gt;<span class="number">1</span>) <span class="built_in">change</span>(k*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid&amp;&amp;tree[k*<span class="number">2</span>+<span class="number">1</span>].ma&gt;<span class="number">1</span>) <span class="built_in">change</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="built_in">update</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==tree[k].l&amp;&amp;r==tree[k].r) <span class="keyword">return</span> tree[k].sum;</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>,l,mid)+<span class="built_in">query</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;k&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) <span class="built_in">swap</span>(l,r);</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="built_in">change</span>(<span class="number">1</span>,l,r);</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,l,r)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P1253">区间最大值</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">arr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,add,ma,cover;</span><br><span class="line">&#125;tree[<span class="number">8000002</span>];</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000002</span>];</span><br><span class="line"><span class="type">int</span> op,l,r,x;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>,w=<span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)w=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) s=s*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> s*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cover_down</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].cover==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    tree[k*<span class="number">2</span>].add=tree[k*<span class="number">2</span>+<span class="number">1</span>].add=<span class="number">0</span>;</span><br><span class="line">    tree[k*<span class="number">2</span>].ma=tree[k*<span class="number">2</span>+<span class="number">1</span>].ma=tree[k].cover;</span><br><span class="line">    tree[k*<span class="number">2</span>].cover=tree[k*<span class="number">2</span>+<span class="number">1</span>].cover=tree[k].cover;</span><br><span class="line">    tree[k].cover=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_down</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree[k].add) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">cover_down</span>(k);</span><br><span class="line">    tree[k*<span class="number">2</span>].ma+=tree[k].add;</span><br><span class="line">    tree[k*<span class="number">2</span>+<span class="number">1</span>].ma+=tree[k].add;</span><br><span class="line">    tree[k*<span class="number">2</span>].add+=tree[k].add;</span><br><span class="line">    tree[k*<span class="number">2</span>+<span class="number">1</span>].add+=tree[k].add;</span><br><span class="line">    tree[k].add=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cover_down</span>(k);</span><br><span class="line">    <span class="built_in">add_down</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].l=l;tree[k].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].ma=a[l];</span><br><span class="line">        tree[k].add=<span class="number">0</span>;</span><br><span class="line">        tree[k].cover=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(k*<span class="number">2</span>,l,mid);<span class="built_in">build</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    tree[k].ma=<span class="built_in">Max</span>(tree[k*<span class="number">2</span>].ma,tree[k*<span class="number">2</span>+<span class="number">1</span>].ma);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change_cover</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].add=<span class="number">0</span>;</span><br><span class="line">        tree[k].ma=x;</span><br><span class="line">        tree[k].cover=x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="built_in">change_cover</span>(k*<span class="number">2</span>,l,r,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">change_cover</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r,x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">change_cover</span>(k*<span class="number">2</span>,l,mid,x),<span class="built_in">change_cover</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,x);</span><br><span class="line">    tree[k].ma=<span class="built_in">Max</span>(tree[k*<span class="number">2</span>].ma,tree[k*<span class="number">2</span>+<span class="number">1</span>].ma);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change_add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cover_down</span>(k);</span><br><span class="line">        tree[k].add+=x;</span><br><span class="line">        tree[k].ma+=x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="built_in">change_add</span>(k*<span class="number">2</span>,l,r,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">change_add</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r,x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">change_add</span>(k*<span class="number">2</span>,l,mid,x),<span class="built_in">change_add</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,x);</span><br><span class="line">    tree[k].ma=<span class="built_in">Max</span>(tree[k*<span class="number">2</span>].ma,tree[k*<span class="number">2</span>+<span class="number">1</span>].ma);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l==l&amp;&amp;tree[k].r==r) <span class="keyword">return</span> tree[k].ma;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="type">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(k*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Max</span>(<span class="built_in">query</span>(k*<span class="number">2</span>,l,mid),<span class="built_in">query</span>(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>();q=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">4</span>;++i) tree[i].cover=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        op=<span class="built_in">read</span>();l=<span class="built_in">read</span>();r=<span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) <span class="built_in">change_cover</span>(<span class="number">1</span>,l,r,<span class="built_in">read</span>());</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">2</span>) <span class="built_in">change_add</span>(<span class="number">1</span>,l,r,<span class="built_in">read</span>());</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>) cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,l,r)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>学的太晚了（悲）。</p><p>参考资料：</p><p><a href="https://blog.csdn.net/huangzihaoal/article/details/81813454">https://blog.csdn.net/huangzihaoal/article/details/81813454</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
